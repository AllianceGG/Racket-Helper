#lang racket

(define (myfor start end func)
  (if(< start end)
     (begin (func start) (myfor (+ 1 start) end func))
     void))

(define prevector (make-vector 101 0))
(define nowvector (make-vector 101 0))
(vector-set! prevector 1 1)

(define (getvalue nowrow)
  (+ (vector-ref prevector nowrow) (vector-ref prevector (- nowrow 1))))
(define (setvalue nowrow value)
  (vector-set! nowvector nowrow value)
  void)
(define (nextline nowline)
  (display (vector-ref nowvector 1))
  (myfor 2 (+ 1 nowline)
    (lambda (index)
      (display " ")
      (display (vector-ref nowvector index))
       void))
  (newline)
  (set! prevector nowvector)
  (set! nowvector (make-vector 101 0))
  void)

(define (printpaska0 linenum nowline nowrow)
  (if(> nowline linenum)
     (void)
     (if(> nowrow nowline)
        (begin (nextline nowline)
               (printpaska0 linenum (+ nowline 1) 1))
        (begin (setvalue nowrow (getvalue nowrow))
               (printpaska0 linenum nowline (+ nowrow 1))))))

(define (printpaska linenum)
  (printpaska0 linenum 1 1))

(define (loop)
  (define line (read))
  (if(equal? line eof)
     (void)
     (begin (printpaska line) (loop))))
(loop)
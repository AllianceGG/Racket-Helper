(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1 ) (variable? v2) (eq? v1 v2)))

(define (=number? exp num)
  (and (number? exp) (= exp num)))



(define (addend s)
  (define (add-iter s)
    (if (eq? (cadr s) '+)
        (list (car s))
        (cons (car s) (add-iter (cdr s)))))
  (if (eq? (cadr s) '+)
      (car s)
      (add-iter s)))


(define (augend s)
  (if (eq? (cadr s) '+)
      (let ((r (cdr (cdr s))))
        (if (= (length r) 1)
            (car r)
            r))
      (augend (cdr s))))
  
(define (sum? x) 
  (if (null? x)
      false
      (if (eq? (car x) '+)
          true
          (sum? (cdr x)))))
      
(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else 
          (cond ((and (pair? a1) (pair? a2)) (append a1 (append (list '+) a2)))
                ((and (pair? a1) (not (pair? a2))) (append a1 (list '+ a2)))
                ((and (not (pair? a1)) (pair? a2)) (cons a1 (cons '+ a2)))
                ((and (not (pair? a1)) (not (pair? a2))) (list a1 '+ a2))))))


(define (make-product a1 a2) 
  (cond ((=number? a1 0) 0)
        ((=number? a2 0) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else 
          (cond ((and (pair? a1) (pair? a2)) 
                   (cond ((and (sum? a1) (sum? a2)) (list a1 '* a2)))
                         ((and (sum? a1) (not (sum? a2))) (append (list a1 '*) a2))
                         ((and (not (sum? a1)) (sum? a2)) (append a1 (list '* a2)))
                         ((and (not (sum? a1)) (not (sum? a2))) (append a1 (cons '* a2))))
                ((and (pair? a1) (not (pair? a2)))
                      (cond ((sum? a1) (list a1 '* a2))
                         ((not (sum? a1)) (append a1 (list '* a2)))))
                ((and (not (pair? a1)) (pair? a2))
                      (cond ((sum? a2) (list a1 '* a2))
                         ((not (sum? a2)) (cons a1 (cons '* a2)))))
                ((and (not (pair? a1)) (not (pair? a2))) (list a1 '* a2))))))


(define (multiplier s)
  (car s))

(define (multiplicand s)
  (if (= 3 (length s))
      (cadr (cdr s))
      (cdr (cdr s))))

(define (product? x) 
  (if (not (pair? x))
      false
      (if (= (length x) 3)
          (eq? (cadr x) '*)
          (and (eq? (cadr x) '*) (product? (cdr (cdr x)))))))




(define (make-expo x n)  (list '** x n))
(define (expo-base s) (cadr s))
(define (expo-e s)  (caddr s))
(define (expo? s)  (and (pair? s ) (eq? (car s) '**)))



  
  



(define (deriv exp var)
  (cond ((number? exp ) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum 
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((expo? exp)
         (make-product
          (expo-e exp) (make-product (make-expo (expo-base exp) (- (expo-e exp) 1)) (deriv (expo-base exp) var))))
        (else 
         (error "wrong format"))))




(deriv '(x * 3) 'x)
(deriv '(y * x) 'x)
(deriv '(x * y) 'x)
(deriv '(x * y * (x + 3)) 'x)


(multiplier '(3 * 5 * 6));
(multiplicand '(3 * 5 * 6))
(make-product 3 'x)
(deriv '(x + 3) 'x)
(deriv '(x * x + x * x * y * (x + 3) + x * y) 'x)




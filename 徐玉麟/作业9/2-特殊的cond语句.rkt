#lang racket
(require r5rs)

(define (myeval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (myeval (cond->if exp) env))
        ((and? exp) (eval-and (operands exp) env))
        ((or? exp) (eval-or (operands exp) env))
        ((let? exp) (eval-let (operands exp) env))
        ((application? exp)
         (my-apply (myeval (operator exp) env)
                   (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (and? exp)
  (tagged-list? exp 'and))
(define (or? exp)
  (tagged-list? exp 'or))
(define (let? exp)
  (tagged-list? exp 'let))

(define (eval-and parameters env)
  (define (eval-and0 parameters init env)
    (if(null? parameters)
       init
       (let ((step (myeval (car parameters) env)))
         (if(false? step)
            false
            (eval-and0 (cdr parameters) step env)))))
  (eval-and0 parameters true env))

(define (eval-or parameters env)
  (define (eval-or0 parameters init env)
    (if(null? parameters)
       init
       (let ((step (myeval (car parameters) env)))
         (if(false? step)
            (eval-or0 (cdr parameters) init env)
            step))))
  (eval-or0 parameters false env))

(define (eval-let body env)
  (let((definelist (car body))
       (beginlist (cons 'begin (cdr body)))
       (vars '())
       (vals '())
       )
    (map (lambda (x)
           (set! vars (mcons (car x) vars))
           (set! vals (mcons (myeval (cadr x) env) vals)))
         definelist)
    (myeval beginlist (extend-environment vars vals env))))

(define (self-evaluating? exp)
(cond ((number? exp) true) 
((string? exp) true) 
(else false)))
(define (variable? exp) (symbol? exp)) 
(define (quoted? exp)
(tagged-list? exp 'quote))

(define (text-of-quotation exp) (cadr exp))
(define (tagged-list? exp tag)
  (cond((pair? exp) (eq? (car exp) tag))
       ((mpair? exp) (eq? (car exp) tag))
       (else false)))

(define (assignment? exp)
(tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))

(define (definition? exp)
(tagged-list? exp 'define))
(define (definition-variable exp)
(if (symbol? (cadr exp))
(cadr exp) 
(caadr exp)))
(define (definition-value exp)
(if (symbol? (cadr exp))
(caddr exp)
(make-lambda (cdadr exp) 
(cddr exp)))) 

(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp)) 

(define (make-lambda parameters body) 
(cons 'lambda (cons parameters body)))

(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
(if (not (null? (cdddr exp)))
(cadddr exp)
'false))

(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))

(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))

(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))

(define (special-clause? clause)
  (let((mid (cdr clause)))
    (if(null? mid)
       false
       (eq? (car mid) '=>))))

(define (special-cond-predicate clause) (car clause))
(define (special-cond-actions clause) (cddr clause))

(define (cond-predicate clause) (car clause))
(define (cond-actions clause)
  (let((action (cdr clause)))
    (if(null? action)
       (list(cond-predicate clause))
       action)))
(define (cond-else-clause? clause)
(eq? (cond-predicate clause) 'else))
(define (cond->if exp)
(expand-clauses (cond-clauses exp)))

(define (expand-clauses clauses)
  (if (null? clauses)
      'false 
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (cond ((cond-else-clause? first)
               (if (null? rest)
                   (sequence->exp (cond-actions first))
                   (error "ELSE clause isn't last -- COND->IF"
                          clauses)))
              ((special-clause? first)
               (make-if (special-cond-predicate first)
                        (list (sequence->exp (special-cond-actions first))
                              (special-cond-predicate first))
                        (expand-clauses rest)))
              (else (make-if (cond-predicate first)
                             (sequence->exp (cond-actions first))
                             (expand-clauses rest)))))))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))

(define (application? exp) (pair? exp))

(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))


(define (eval-assignment exp env)
(set-variable-value! (assignment-variable exp)
(myeval (assignment-value exp) env)
env)
'ok)

(define (eval-definition exp env)
(define-variable! (definition-variable exp)
(myeval (definition-value exp) env)
env)
'ok)

(define (eval-if exp env)
(if (true? (myeval (if-predicate exp) env))
(myeval (if-consequent exp) env)
(myeval (if-alternative exp) env)))

(define (make-procedure parameters body env)
(list 'procedure parameters body env))



(define (compound-procedure? p)
(tagged-list? p 'procedure))

(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))

(define (eval-sequence exps env)
(cond ((last-exp? exps) (myeval (first-exp exps) env))
(else (myeval (first-exp exps) env)
(eval-sequence (rest-exps exps) env))))

(define (lookup-variable-value var env)
(define (env-loop env)
(define (scan vars vals)
(cond ((null? vars)
(env-loop (enclosing-environment env)))
((eq? var (car vars))
(car vals))
(else (scan (cdr vars) (cdr vals)))))
(if (eq? env the-empty-environment)
(error "Unbound variable" var)
(let ((frame (first-frame env)))
(scan (frame-variables frame)
(frame-values frame)))))
(env-loop env))

(define (make-frame variables values)
  (mcons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (mcons var (car frame)))
  (set-cdr! frame (mcons val (cdr frame))))
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

;(define (mylength x)
;  (cond((list? x) (length x))
;       (else (mlength x))))

(define (extend-environment vars vals base-env)
(if (= (length vars) (length vals))
(cons (make-frame vars vals) base-env)
(if (< (length vars) (length vals))
(error "Too many arguments supplied" vars vals)
(error "Too few arguments supplied" vars vals))))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals) 
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'number? number?)
        (list 'symbol? symbol?)
        (list 'eq? eq?)
        (list 'pair? pair?)
        (list 'not not)
        (list 'length length)
        (list 'cadr cadr)
        (list 'caddr caddr)
        (list 'cadddr cadddr)
        (list 'void void)
        (list 'list list)
        (list 'append append)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '> >)
        (list '< <)
        (list '= =)
        (list 'remainder remainder)
        (list 'sqrt sqrt)
        (list 'assoc assoc)))
(define (primitive-procedure-names) 
(map car
primitive-procedures))
(define (primitive-procedure-objects) 
(map (lambda (proc) (list 'primitive (cadr proc)))
primitive-procedures))

(define (primitive-procedure? proc)
(tagged-list? proc 'primitive))
(define (primitive-implementation proc) (car(cdr proc)))

(define (setup-environment)
(let ((initial-env
(extend-environment (primitive-procedure-names)
(primitive-procedure-objects)
the-empty-environment)))
(define-variable! 'true true initial-env)
(define-variable! 'false false initial-env)
initial-env))
(define glb-env (setup-environment))

(define (my-apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         ( apply (primitive-implementation procedure) arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))

        (else
         (error "unkonwn procedure type -- APPLY" procedure))))

(define (list-of-values exps env)
    (if (no-operands? exps)
        '()
        (let ((first-value (myeval (first-operand exps) env)))
            (cons first-value
                  (list-of-values (rest-operands exps) env)))))

(define (true? x) (not (false? x)))
(define (false? x) (or (equal? x false)))

(define (driver-loop)
  (let ((input (read)))
    (if (eq? input eof)
        (void)
        (let ((output (myeval input glb-env)))
          (user-print output)
          (driver-loop)))))

(define (user-print object)
  (cond ((equal? 'ok object) (void))
        ((compound-procedure? object)
         (display (list 'compound-procedure
                        (procedure-parameters object)
                        (procedure-body object)
                        '<procedure-env>))
         (newline))
        (else (display object)(newline))))

(driver-loop)
